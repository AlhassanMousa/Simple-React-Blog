{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error('could not fetch data for that resources');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 500);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/hassan/React/React/ReactBlog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,MAAMC,QAAQ,GAAIC,GAAD,IAAQ;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAGGC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AACAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACV,GAAD,EAAK;AAACW,QAAAA,MAAM,EAAGJ,SAAS,CAACI;AAApB,OAAL,CAAL,CACCC,IADD,CACMC,GAAG,IAAG;AACZ,YAAG,CAACA,GAAG,CAACC,EAAR,EAAY;AACR,gBAAMC,KAAK,CAAC,yCAAD,CAAX;AAEJ;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AAEF,OARG,EASAJ,IATA,CASKX,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAbA,EAcAW,KAdA,CAcMC,GAAG,IAAI;AACV,YAAGA,GAAG,CAACC,IAAJ,KAAa,YAAhB,EAA6B;AACzBC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEK;AACLjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;AACC;AACH,OArBD;AAsBH,KAvBS,EAuBR,GAvBQ,CAAV;AAyBA,WAAO,MAAMf,SAAS,CAACgB,KAAV,EAAb;AACH,GA5BQ,EA4BN,CAACvB,GAAD,CA5BM,CAAT;AAoCJ,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACK,CA3CL;;GAAMN,Q;;AA6CN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\n\nconst useFetch = (url) =>{\n const [data, setData] = useState(null);\n const [isPending, setIsPending] = useState(true);\n const [error, setError] = useState(null);\n\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n        setTimeout(() => {\n            fetch(url,{signal : abortCont.signal}) \n            .then(res =>{\n            if(!res.ok) {\n                throw Error('could not fetch data for that resources');\n          \n           } \n           return res.json();\n           \n        }) \n           .then(data => {\n               setData(data);\n               setIsPending(false);\n               setError(null);\n           })\n           .catch(err => {\n               if(err.name === 'AbortError'){\n                   console.log('fetch aborted')\n               }else{\n               setIsPending(false);\n               setError(err.message);\n               } \n            });\n        },500);\n            \n        return () => abortCont.abort();\n    }, [url]);\n    \n    \n\n\n\n    \n\nreturn {data, isPending, error};\n    };\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}